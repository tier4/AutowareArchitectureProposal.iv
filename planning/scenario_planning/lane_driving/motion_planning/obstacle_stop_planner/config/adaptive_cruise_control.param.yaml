/**:
  ros__parameters:
    adaptive_cruise_control:
      # Adaptive Cruise Control (ACC) config
      use_object_to_estimate_vel: true # use tracking objects for estimating object velocity or not
      use_pcl_to_estimate_vel: true # use pcl for estimating object velocity or not
      consider_obj_velocity: true # consider forward vehicle velocity to ACC or not

      # general parameter for ACC
      obstacle_stop_velocity_thresh: 1.0 # threshold of forward obstacle velocity to insert stop line (to stop acc) [m/s]
      emergency_stop_acceleration: -5.0 # supposed minimum acceleration (deceleration) in emergency stop [m/ss]
      emergency_stop_idling_time: 0.5 # supposed idling time to start emergency stop [s]
      min_dist_stop: 4.0 # minimum distance of emergency stop [m]
      obstacle_emergency_stop_acceleration: -5.0 # supposed minimum acceleration (deceleration) in emergency stop [m/ss]
      max_standard_acceleration: 0.5 # supposed maximum acceleration in active cruise control [m/ss]
      min_standard_acceleration: -1.0 # supposed minimum acceleration (deceleration) in active cruise control
      standard_idling_time: 0.5 # supposed idling time to react object in active cruise control [s]
      min_dist_standard: 4.0 # minimum distance in active cruise control [m]
      obstacle_min_standard_acceleration: -1.5 # supposed minimum acceleration of forward obstacle [m/ss]
      margin_rate_to_change_vel: 0.3 # margin to insert upper velocity [-]
      use_time_compensation_to_calc_distance: true # use time-compensation to calculate distance to forward vehicle

      # pid parameter for ACC
      p_coefficient_positive: 0.1 # coefficient P in PID control (used when target dist -current_dist >=0) [-]
      p_coefficient_negative: 0.3 # coefficient P in PID control (used when target dist -current_dist <0) [-]
      d_coefficient_positive: 0.0 # coefficient D in PID control (used when delta_dist >=0) [-]
      d_coefficient_negative: 0.2 # coefficient D in PID control (used when delta_dist <0) [-]

      # parameter for object velocity estimation
      object_polygon_length_margin: 2.0 # The distance to extend the polygon length the object in pointcloud-object matching [m]
      object_polygon_width_margin: 0.5 # The distance to extend the polygon width the object in pointcloud-object matching [m]
      valid_estimated_vel_diff_time: 1.0 # Maximum time difference treated as continuous points in speed estimation using a point cloud [s]
      valid_vel_que_time: 0.5 # Time width of information used for speed estimation in speed estimation using a point cloud [s]
      valid_estimated_vel_max: 20.0 # Maximum value of valid speed estimation results in speed estimation using a point cloud [m/s]
      valid_estimated_vel_min: -20.0 # Minimum value of valid speed estimation results in speed estimation using a point cloud [m/s]
      thresh_vel_to_stop: 1.5 # Embed a stop line if the maximum speed calculated by ACC is lower than this speed [m/s]
      lowpass_gain_of_upper_velocity: 0.75 # Lowpass-gain of upper velocity
      use_rough_velocity_estimation: false # Use rough estimated velocity if the velocity estimation is failed (#### If this parameter is true, the vehicle may collide with the front car. Be careful. ####)
      rough_velocity_rate: 0.9 # In the rough velocity estimation, the velocity of front car is estimated as self current velocity * this value
